---
:title: Mostrar productos similares
:description: Mostrando productos relacionados (similares) en la ficha de un producto
:keywords: html, liquid, bootic, siilares, relacionados, producto, productos
---
# Mostrando productos similares en la ficha de producto

## Relacionando productos en el administrador

Bootic relaciona productos mediante "etiquetas". Si dos productos comparten una o más etiquetas se consideran productos relacionados o similares.

Para agregar o quitar etiquetas a un producto en el panel de administración, navega al formulario de edición de cada producto y utiliza el selector de etiquetas del costado derecho, bajo las colecciones.

<img src="<%= img('/img/themes/tag-selector.png').url %>" alt="Selector de etiquetas" />

## Mostrando productos en tus plantillas

En el editor de plantillas de tu tienda, abre a la plantilla <a href="/es/themes/product">product.html</a>, que representa la ficha de cada producto y pega el siguiente código.

<pre>:::html
{% if product.has_similar_products %}
  <div id="similares">
    
    <h2 class="titulo">{{ "titles.related_products" | t }}</h2>

    <ul class="collection clearfix">
      {% for p in product.similar_products limit:4 %}
      <li class="item-{{ forloop.index + 1 }} clearfix">
        <a href="{{ p.url }}" title="{{ p.model }}">
          <img src="{{ p.first_image.thumbnail }}" alt="{{ p.model }}" />
        </a>

        <h3 class="product-model">
          <a href="{{ p.url }}" title="{{ p.model }}">{{ p.model | truncate:30 }}</a>
        </h3>
        
        <p class="product-vendor">{{ p.vendor }}</p>
        
        {% unless p.price.to_f == 0.0 %}
        <small class="product-price">{{ p.price.format }}</small>
        {% endunless %}

      </li>
      {% endfor %}
    </ul>

  </div><!-- /similares -->
  {% endif %}
</pre>

Con un poco de <code>CSS</code> para el diseño, esto genera una lista de hasta 4 productos relacionados al producto actual.

<img src="<%= img('/img/themes/similar-products.png').thumb('x200').url %>" alt="Products relacionados" class="framed" />

Vamos por partes:

<pre>:::html
{% if product.has_similar_products %}
   ...
{% endif %}
</pre>

El método <code>has_similar_products</code> en el objeto <code>product</code> (el producto de la página actual) revisa que el producto tenga productos relacionados. Si no es así el contenido de la condición simplemente no se despliega en la página.

<pre>:::html
  {{ "titles.related_products" | t }}
</pre>

El filtro "t" se usa para traducir cadenas de texto comunes conocidad por Bootic. En este caso la clave "titles.related_products" se traduce al castellano "productos relacionados" y al inglés "similar products". Puedes reemplazar todo eso por tu propio título.

<pre>:::html
  {% for p in product.similar_products limit:4 %}
     ...
  {% endfor %}
</pre>

Este bloque está recorriendo los 4 primeros productos en la colección <code>similar_products</code> del producto actual. Cada producto es asignado a la variable <code>p</code> para que puedas acceder a sus atributos al generar el HTML para cada uno. Esto es lo que se llama un "loop".

Dentro del <em>loop</em> incluyes el HTML que quieres generar para cada producto. En el ejemplo de esta página estamos mostrando la primera imagen de cada producto dentro de un hipervínculo ("link") a la ficha del producto.

<pre>:::html
  <a href="{{ p.url }}" title="{{ p.model }}">
    <img src="{{ p.first_image.thumbnail }}" alt="{{ p.model }}" />
  </a>
</pre>

Luego mostramos el título o modelo del producto - de nuevo dentro de un link - usando el filtro <code>truncate</code> para asegurarnos de que sólo mostramos los primeros 30 caractéres del título y así evitar romper el diseño.

<pre>:::html
  <a href="{{ p.url }}" title="{{ p.model }}">{{ p.model | truncate:30 }}</a>
</pre>

Luego mostramos el nombre del fabricante del producto ("vendor")

<pre>:::html
  <p class="product-vendor">{{ p.vendor }}</p>
</pre>

Por último, mostramos el precio de producto, pero sólo si éste es mayor que 0 (para no mostrar un "0" para productos que pudieran no tener precio o ser gratuitos)

<pre>:::html
  {% unless p.price.to_f == 0.0 %}
    <small class="product-price">{{ p.price.format }}</small>
  {% endunless %}
</pre>

Usamos el método <code>format</code> en el precio del producto, que despliega la puntuación correcta y el símbolo de la moneda configurada en tu tienda.
